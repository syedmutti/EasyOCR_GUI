# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindowOCR.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'MainWindowOCR.ui'
#
# Created by: PyQt5 UI code generator 5.15.4
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import sys
import easyocr.easyocr
from PyQt5 import QtCore, QtWidgets
from PyQt5.QtWidgets import QFileDialog
from PyQt5.QtGui import QPixmap, QImage
import cv2
import time

from easyocr.QImageViewer import QtImageViewer

class Ui_MainWindow(object):

    def __init__(self):
        super().__init__()
        self.file_name = ""
        self.lang = "en"
        self.results = []


    def setupUi(self, MainWindow):

        MainWindow.setObjectName("EasyOCR")
        MainWindow.resize(1857, 1402)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.statusbar.showMessage("System Status | Normal")

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout()
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.label_2 = QtWidgets.QLabel(self.groupBox_2)
        self.label_2.setObjectName("label_2")
        self.horizontalLayout.addWidget(self.label_2)

        self.comboBox = QtWidgets.QComboBox(self.groupBox_2)
        self.comboBox.setObjectName("comboBox")
        self.comboBox.setObjectName("comboBox")
        self.comboBox.addItem("en")
        self.comboBox.addItem("ch_sim")
        self.comboBox.addItem("fr")
        self.comboBox.addItem("de")
        self.comboBox.addItem("ko")
        self.comboBox.addItem("ja")
        self.comboBox.addItem("ar")
        self.comboBox.activated[str].connect(self.select_lang)

        self.horizontalLayout.addWidget(self.comboBox)
        self.gridLayout_2.addLayout(self.horizontalLayout, 1, 0, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_2.addItem(spacerItem, 0, 1, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.groupBox_2)
        self.label_4.setObjectName("label_4")
        self.gridLayout_2.addWidget(self.label_4, 1, 2, 1, 1)
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.pushButton = QtWidgets.QPushButton(self.groupBox_2)
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.getfile2)
        self.horizontalLayout_2.addWidget(self.pushButton)
        self.label = QtWidgets.QLabel(self.groupBox_2)
        self.label.setObjectName("label")
        self.horizontalLayout_2.addWidget(self.label)
        self.gridLayout_2.addLayout(self.horizontalLayout_2, 0, 0, 1, 1)
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.checkBox_2 = QtWidgets.QCheckBox(self.groupBox_2)
        self.checkBox_2.setObjectName("checkBox_2")
        self.horizontalLayout_3.addWidget(self.checkBox_2)
        self.checkBox = QtWidgets.QCheckBox(self.groupBox_2)
        self.checkBox.setObjectName("checkBox")
        self.horizontalLayout_3.addWidget(self.checkBox)
        self.gridLayout_2.addLayout(self.horizontalLayout_3, 0, 2, 1, 1)
        self.gridLayout_3.addWidget(self.groupBox_2, 0, 0, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout.setObjectName("gridLayout")
        self.plainTextEdit = QtWidgets.QPlainTextEdit(self.groupBox)
        self.plainTextEdit.setObjectName("plainTextEdit")
        self.gridLayout.addWidget(self.plainTextEdit, 0, 4, 1, 1)
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.spinBox = QtWidgets.QSpinBox(self.groupBox)
        self.spinBox.setObjectName("spinBox")
        self.spinBox.setValue(1)
        self.horizontalLayout_4.addWidget(self.spinBox)
        self.Btn10x = QtWidgets.QPushButton(self.groupBox)
        self.Btn10x.setObjectName("Btn10x")
        self.Btn10x.clicked.connect(self.tenX)
        self.horizontalLayout_4.addWidget(self.Btn10x)
        self.BtnOcr = QtWidgets.QPushButton(self.groupBox)
        self.BtnOcr.setObjectName("BtnOcr")
        self.BtnOcr.clicked.connect(self.do_ocr)
        self.horizontalLayout_4.addWidget(self.BtnOcr)
        self.gridLayout.addLayout(self.horizontalLayout_4, 1, 4, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.groupBox)
        self.label_3.setText("")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 0, 0, 1, 3)
        #self.graphicsView = QtWidgets.QGraphicsView(self.groupBox)
        self.graphicsView = QtImageViewer()
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 0, 3, 1, 1)
        self.gridLayout_3.addWidget(self.groupBox, 1, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "EasyOCR"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Options"))
        self.label_2.setText(_translate("MainWindow", "Select Language"))
        self.label_4.setText(_translate("MainWindow", "Time Elapsed :"))
        self.pushButton.setText(_translate("MainWindow", "Load Image"))
        self.label.setText(_translate("MainWindow", "........"))
        self.checkBox_2.setText(_translate("MainWindow", "Display confidence values in result"))
        self.checkBox.setText(_translate("MainWindow", "Show overlay on top of Image"))
        self.groupBox.setTitle(_translate("MainWindow", "View"))
        self.Btn10x.setText(_translate("MainWindow", "Run X-times"))
        self.BtnOcr.setText(_translate("MainWindow", "DO OCR!"))


    def getfile2(self):
        self.statusbar.showMessage('Loading Image ...')
        # Load Image in a Custom Graphics View
        file_path, check = QFileDialog.getOpenFileName(None, "QFileDialog.getOpenFileName()",
                                                  "",
                                                  "All Files (*);;JPEG Files (*.jpeg);; JPG Files (*.jpg) ;;PNG Files (*.png)")
        if check:
            self.file_name = file_path
            self.label.setText(file_path.split('/')[-1])
            self.graphicsView.loadImageFromFile(file_path)
            self.statusbar.clearMessage()


    def do_ocr(self):

        self.plainTextEdit.clear()
        if not self.file_name == "":

            self.statusbar.showMessage('Doing OCR ...')
            try:
                image = cv2.imread(self.file_name, cv2.IMREAD_COLOR)
            except:
                print("An exception occurred in reading Image")

            reader = easyocr.Reader([self.lang], gpu=False)
            start = time.time()
            self.results = reader.readtext(image)
            end = time.time()
            self.label_4.setText("Time Elapsed : {}".format(str(end - start)[:6]))
            for index, det in enumerate(self.results):
                (box, text, score) = det

                self.plainTextEdit.insertPlainText(text + "\n")
                if self.checkBox.isChecked():

                    try:
                        [left_top, right_top, bottom_right, bottom_left] = box
                        image = cv2.rectangle(image, (left_top[0], left_top[1]), (bottom_right[0], bottom_right[1]),
                                              (255, 255, 0), 2)
                        image = cv2.putText(image, text, (left_top[0], left_top[1]),
                                            cv2.FONT_HERSHEY_SIMPLEX,
                                            1, (255, 0, 0), 1, cv2.LINE_AA)
                    except:
                        print("An exception occurred in drawing Bbox")

                if self.checkBox_2.isChecked():
                    try:
                        image = cv2.putText(image, str(score)[:3], (bottom_right[0], bottom_right[1]), cv2.FONT_HERSHEY_SIMPLEX,
                                             1, (0, 255, 0), 1, cv2.LINE_AA)
                    except:
                        print("An exception occurred in writing text")

            height, width, channel = image.shape
            bytesPerLine = 3 * width
            qImg = QImage(image.data, width, height, bytesPerLine, QImage.Format_RGB888)

            #self.viewer.setPixmap(QPixmap(qImg))
            self.graphicsView.setImage(qImg)

            self.statusbar.showMessage("Done .. ")



    def tenX(self):
        times = []
        if not self.file_name == "":

            try:
                image = cv2.imread(self.file_name, cv2.IMREAD_COLOR)
                reader = easyocr.Reader([self.lang], gpu=False)
            except:
                print("An exception occurred in reading Image")

            for i in range(self.spinBox.value()):

                start = time.time()
                self.results = reader.readtext(image)
                self.plainTextEdit.clear()
                end = time.time()
                t = end - start
                print(i+1, str(t))
                times.append(t)
                self.statusbar.showMessage("Time Elapsed : {}".format(str(end - start)[:6]))

            avg_time = sum(times) / len(times)
            for index, det in enumerate(self.results):
                (box, text, score) = det
                self.plainTextEdit.insertPlainText(text + "\n")

            self.label_4.setText("Time Elapsed for {}-iteration (Average) : {}".format( self.spinBox.value(), avg_time))
            self.statusbar.showMessage("Done .. ")

    def select_lang(self):

        self.lang = str(self.comboBox.currentText())


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())




